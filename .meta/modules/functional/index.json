{
  "name": "index.js",
  "description": "High-performance functional programming utilities focusing on\nfunction interception, promise-based operations, and dependency injection.\nFeatures include function composition, lazy evaluation, pub/sub patterns,\nand robust error handling.",
  "features": [],
  "examples": [
    {
      "caption": "Function Interception (Sync & Async)",
      "code": "import { helper } from 'xajs/functional'\n\n// Synchronous interception\nconst loggedFetch = helper.intercepter(fetch)\n.before(url => {\nconsole.log(`Fetching: ${url}`)\n})\n.after((url, response) => {\nconsole.log(`Completed: ${url} (${response.status})`)\n})\n.$runner\n\n// Async interception\nconst cachedFetch = helper.intercepter(fetch)\n.before(async url => {\nconst cached = await cache.get(url)\nif (cached) return cached\n})\n.after(async (url, response) => {\nawait cache.set(url, response.clone())\n})\n.$asyncRunner"
    },
    {
      "caption": "Error Handling with tryNext",
      "code": "import { helper } from 'xajs/functional'\n\nconst { tryNext, sleep } = helper\n\n// Chain of fallback strategies\nconst getData = tryNext([\n// Primary strategy: API call\nasync () => {\nconst response = await fetch('/api/data')\nif (!response.ok) throw new Error('API failed')\nreturn response.json()\n},\n// Fallback: Local cache\nasync () => {\nconst cached = await localStorage.getItem('api_data')\nif (!cached) throw new Error('Cache miss')\nreturn JSON.parse(cached)\n},\n// Last resort: Default data\n() => ({ status: 'offline', data: [] })\n])"
    },
    {
      "caption": "Pub/Sub System",
      "code": "import { helper } from 'xajs/functional'\n\nconst { PS: { Puber, Suber } } = helper\n\n// Create publisher and subscriber\nclass DataService extends Puber {\nconstructor() {\nsuper('data-service', {})\n}\n\nasync fetchData() {\nconst data = await fetch('/api/data')\nthis.pub('data:updated', await data.json())\n}\n}\n\nclass DataView extends Suber {\nconstructor(service) {\nsuper('data-view', {})\nthis.rss(service, [\n{\nmsg: 'data:updated',\nhandler: this.onDataUpdate.bind(this)\n}\n])\n}\n\nonDataUpdate(data) {\nthis.render(data)\n}\n}"
    },
    {
      "caption": "Dependency Injection",
      "code": "import { helper } from 'xajs/functional'\n\nconst { di } = helper\n\n// Define services with dependencies\n@di.provide('logger')\nclass Logger {\nlog(msg) { console.log(msg) }\n}\n\n@di.provide('api')\n@di.inject(['logger'])\nclass ApiService {\nconstructor(logger) {\nthis.logger = logger\n}\n\nasync fetch(url) {\nthis.logger.log(`Fetching: ${url}`)\nreturn fetch(url).then(r => r.json())\n}\n}"
    }
  ],
  "exports": [
    "helper"
  ],
  "related": [
    "."
  ],
  "see": [],
  "namespaces": {
    "FunctionComposition": {
      "name": "FunctionComposition",
      "properties": {
        "intercepter": {
          "type": "Object",
          "name": "intercepter",
          "description": "Function interception with before/after hooks"
        },
        "tryNext": {
          "type": "Object",
          "name": "tryNext",
          "description": "Chain-based error handling with fallbacks"
        },
        "promisify": {
          "type": "Object",
          "name": "promisify",
          "description": "Convert callback-style functions to promises"
        },
        "sleep": {
          "type": "Object",
          "name": "sleep",
          "description": "Promise-based delay utilities"
        }
      }
    },
    "AsyncUtilities": {
      "name": "AsyncUtilities",
      "properties": {
        "PLazy": {
          "type": "Object",
          "name": "PLazy",
          "description": "Lazy promise evaluation with caching"
        },
        "PS": {
          "type": "Object",
          "name": "PS",
          "description": "Simple pub/sub event system with namespacing"
        },
        "retry": {
          "type": "Object",
          "name": "retry",
          "description": "Automatic retry with exponential backoff"
        }
      }
    },
    "DependencyInjection": {
      "name": "DependencyInjection",
      "properties": {
        "provide": {
          "type": "Object",
          "name": "provide",
          "description": "Class-based dependency provider"
        },
        "inject": {
          "type": "Object",
          "name": "inject",
          "description": "Dependency injection decorator"
        }
      }
    }
  }
}