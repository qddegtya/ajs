{
  "name": "index.js",
  "description": "Core internal utilities providing type checking, object manipulation,\nand shared helper functions. Features comprehensive type detection and safe\nobject operations with performance optimization.",
  "features": [],
  "examples": [
    {
      "caption": "Type Checking",
      "code": "import { is } from 'xajs/internal'\n\n// Array checks\nconsole.log(is.isArray([1, 2, 3]))  // true\nconsole.log(is.isArray({}))         // false\n\n// Object checks\nconsole.log(is.isObject({}))        // true\nconsole.log(is.isObject([]))        // false\n\n// Function checks\nconsole.log(is.isFunction(() => {}))            // true\nconsole.log(is.isFunction(async () => {}))      // true\nconsole.log(is.isFunction(function* () {}))     // true\n\n// Boolean checks\nconsole.log(is.isBoolean(true))     // true\nconsole.log(is.isBoolean(1))        // false"
    },
    {
      "caption": "Safe Object Operations",
      "code": "import { assign, hasOwnProp } from 'xajs/internal'\n\n// Safe object assignment\nconst base = { a: 1, b: { c: 2 } }\nconst extension = { b: { d: 3 }, e: 4 }\n\nconst result = assign({}, base, extension)\nconsole.log(result)\n// {\n//   a: 1,\n//   b: { c: 2, d: 3 },\n//   e: 4\n// }\n\n// Safe property checks\nif (hasOwnProp(result, 'b')) {\nconsole.log('Property exists:', result.b)\n}"
    },
    {
      "caption": "Type-Safe Operations",
      "code": "import { is, assign } from 'xajs/internal'\n\nfunction safeUpdate(target, source) {\n// Type validation\nif (!is.isObject(target) || !is.isObject(source)) {\nthrow new TypeError('Both arguments must be objects')\n}\n\n// Safe assignment with type checking\nconst result = assign({}, target)\n\nfor (const key in source) {\nif (hasOwnProp(source, key)) {\nconst value = source[key]\n\n// Type-specific handling\nif (is.isArray(value)) {\nresult[key] = [...value]\n} else if (is.isObject(value)) {\nresult[key] = safeUpdate({}, value)\n} else {\nresult[key] = value\n}\n}\n}\n\nreturn result\n}"
    }
  ],
  "exports": [
    "assign",
    "hasOwnProp",
    "is"
  ],
  "related": [
    "."
  ],
  "see": [],
  "namespaces": {
    "TypeChecking": {
      "name": "TypeChecking",
      "properties": {
        "is": {
          "type": "Function",
          "name": "is",
          "description": ".isBoolean - Boolean type check"
        }
      }
    },
    "ObjectUtilities": {
      "name": "ObjectUtilities",
      "properties": {
        "assign": {
          "type": "Function",
          "name": "assign",
          "description": "Safe object assignment with deep copy"
        },
        "hasOwnProp": {
          "type": "Function",
          "name": "hasOwnProp",
          "description": "Safe property existence check"
        }
      }
    }
  }
}