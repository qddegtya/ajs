[
  {
    "path": "core/index.js",
    "info": {
      "description": "Core module providing fundamental building blocks for AJS Provides the foundational building blocks of AJS, including a powerful class system, deferred promises, and decorators for enhancing classes and methods.",
      "namespaces": [
        {
          "title": "ClassSystem",
          "properties": [
            {
              "type": "Object",
              "name": "inheritance",
              "description": "Advanced class inheritance with $extends and $mixins support"
            },
            {
              "type": "Object",
              "name": "constructor",
              "description": "Constructor lifecycle management with $ctor"
            },
            {
              "type": "Object",
              "name": "methods",
              "description": "Method overriding and super calls"
            },
            {
              "type": "Object",
              "name": "static",
              "description": "Static and instance method support"
            }
          ]
        },
        {
          "title": "Decorators",
          "properties": [
            {
              "type": "Object",
              "name": "functions",
              "description": "Function and class decorators"
            },
            {
              "type": "Object",
              "name": "builtin",
              "description": "Built-in decorators like @mixin and @deprecate"
            },
            {
              "type": "Object",
              "name": "factory",
              "description": "Custom decorator factory support"
            },
            {
              "type": "Object",
              "name": "properties",
              "description": "Method and property decorators"
            }
          ]
        },
        {
          "title": "Deferred",
          "properties": [
            {
              "type": "Object",
              "name": "promise",
              "description": "Promise-like interface with resolve/reject"
            },
            {
              "type": "Object",
              "name": "progress",
              "description": "Progress tracking with notify"
            },
            {
              "type": "Object",
              "name": "chain",
              "description": "Chainable then/catch/finally"
            },
            {
              "type": "Object",
              "name": "cancel",
              "description": "Cancellation support"
            }
          ]
        }
      ],
      "examples": [
        {
          "caption": "Class System with Inheritance",
          "code": "import { base } from 'xajs/core'\nconst MyClass = base.Class({\n$extends: ParentClass,\n$mixins: [SomeMixin],\n$ctor() {\nthis.name = 'example'\n},\nmethod() {\n// Method implementation\n}\n})\n"
        },
        {
          "caption": "Using Decorators",
          "code": "import { decorators } from 'xajs/core'\nclass Enhanced {\nenhancedMethod() {\n// Enhanced functionality\n}\n}\n"
        }
      ],
      "see": [
        {
          "url": "https://ajs.dev/docs/core",
          "text": "Core Module Documentation"
        }
      ]
    }
  },
  {
    "path": "dom/index.js",
    "info": {
      "description": "DOM manipulation and event handling utilities Provides a lightweight virtual DOM implementation and utilities for DOM manipulation and event handling, with special optimizations for mobile devices.",
      "namespaces": [
        {
          "title": "VirtualDOM",
          "properties": [
            {
              "type": "Object",
              "name": "implementation",
              "description": "Lightweight virtual DOM implementation"
            },
            {
              "type": "Object",
              "name": "diff",
              "description": "Efficient diff and patch algorithm"
            },
            {
              "type": "Object",
              "name": "lifecycle",
              "description": "Component lifecycle management"
            },
            {
              "type": "Object",
              "name": "events",
              "description": "Event delegation support"
            }
          ]
        },
        {
          "title": "EventHandling",
          "properties": [
            {
              "type": "Object",
              "name": "management",
              "description": "Advanced event management"
            },
            {
              "type": "Object",
              "name": "delegation",
              "description": "Event delegation and bubbling"
            },
            {
              "type": "Object",
              "name": "touch",
              "description": "Mobile touch event optimization"
            },
            {
              "type": "Object",
              "name": "lifecycle",
              "description": "Event once and off support"
            }
          ]
        },
        {
          "title": "URLParsing",
          "properties": [
            {
              "type": "Object",
              "name": "parser",
              "description": "Robust URL parsing and manipulation"
            },
            {
              "type": "Object",
              "name": "query",
              "description": "Query string handling"
            },
            {
              "type": "Object",
              "name": "path",
              "description": "Path normalization"
            },
            {
              "type": "Object",
              "name": "params",
              "description": "URL parameter extraction"
            }
          ]
        }
      ],
      "examples": [
        {
          "caption": "Virtual DOM Creation",
          "code": "import { h } from 'xajs/dom'\nconst vnode = h('div', { className: 'container' }, [\nh('h1', null, 'Hello AJS!'),\nh('p', null, 'Welcome to the future of JavaScript.')\n])\n"
        },
        {
          "caption": "Event Handling",
          "code": "import { E } from 'xajs/dom'\nE.on(element, 'click', event => {\nconsole.log('Clicked:', event.target)\n})\nE.once(element, 'load', event => {\nconsole.log('Loaded once')\n})\n"
        },
        {
          "caption": "URL Parsing",
          "code": "import { UrlParser } from 'xajs/dom'\nconst parser = new UrlParser('https://example.com/path?query=value')\nconsole.log(parser.pathname) // '/path'\nconsole.log(parser.query)    // { query: 'value' }\n"
        }
      ],
      "see": [
        {
          "url": "https://ajs.dev/docs/dom",
          "text": "DOM Module Documentation"
        }
      ]
    }
  },
  {
    "path": "fp/index.js",
    "info": {
      "description": "Functional Programming Core Module Core functional programming utilities focusing on pure function composition and immutable data handling.",
      "namespaces": [
        {
          "title": "FunctionalCore",
          "properties": [
            {
              "type": "Object",
              "name": "composition",
              "description": "Pure function composition utilities"
            },
            {
              "type": "Object",
              "name": "pointfree",
              "description": "Point-free programming support"
            },
            {
              "type": "Object",
              "name": "currying",
              "description": "Function currying and partial application"
            },
            {
              "type": "Object",
              "name": "immutable",
              "description": "Immutable data handling patterns"
            }
          ]
        }
      ],
      "examples": [
        {
          "caption": "",
          "code": "import { compose } from 'xajs/fp'\n// Create a pipeline of pure functions\nconst pipeline = compose(\nuppercase,\ntrim,\nnormalize\n)\n// Apply the transformation\nconst result = pipeline('  hello world  ')\n"
        }
      ],
      "see": []
    }
  },
  {
    "path": "functional/index.js",
    "info": {
      "description": "Functional programming utilities and patterns Provides a comprehensive set of functional programming utilities including function composition, currying, dependency injection, pub/sub system, and promise utilities.",
      "namespaces": [
        {
          "title": "FunctionComposition",
          "properties": [
            {
              "type": "Object",
              "name": "interceptors",
              "description": "Advanced interceptors for function composition"
            },
            {
              "type": "Object",
              "name": "async",
              "description": "Support for async function composition"
            },
            {
              "type": "Object",
              "name": "errorHandling",
              "description": "Error handling in composition chains"
            },
            {
              "type": "Object",
              "name": "middleware",
              "description": "Middleware pattern support"
            }
          ]
        },
        {
          "title": "DependencyInjection",
          "properties": [
            {
              "type": "Object",
              "name": "decorators",
              "description": "Decorator-based DI system"
            },
            {
              "type": "Object",
              "name": "resolution",
              "description": "Automatic dependency resolution"
            },
            {
              "type": "Object",
              "name": "circular",
              "description": "Circular dependency detection"
            },
            {
              "type": "Object",
              "name": "scoping",
              "description": "Scoped container support"
            }
          ]
        },
        {
          "title": "EventSystem",
          "properties": [
            {
              "type": "Object",
              "name": "pubsub",
              "description": "Pub/Sub pattern implementation"
            },
            {
              "type": "Object",
              "name": "priority",
              "description": "Event prioritization"
            },
            {
              "type": "Object",
              "name": "async",
              "description": "Async event handling"
            },
            {
              "type": "Object",
              "name": "cancellation",
              "description": "Event cancellation"
            }
          ]
        },
        {
          "title": "PromiseUtilities",
          "properties": [
            {
              "type": "Object",
              "name": "lazy",
              "description": "Promise-based lazy evaluation"
            },
            {
              "type": "Object",
              "name": "interception",
              "description": "Promise chain interception"
            },
            {
              "type": "Object",
              "name": "fallback",
              "description": "Fallback chain with tryNext"
            },
            {
              "type": "Object",
              "name": "timeout",
              "description": "Timeout and retry support"
            }
          ]
        }
      ],
      "examples": [
        {
          "caption": "Function Composition",
          "code": "import { helper } from 'xajs/functional'\nconst { intercepter } = helper\nconst enhance = intercepter.compose([\naddLogging,\naddValidation,\naddCaching\n])\n"
        },
        {
          "caption": "Dependency Injection",
          "code": "import { helper } from 'xajs/functional'\nconst { di } = helper\nclass Config {\ngetApiUrl() { return 'https://api.example.com' }\n}\n"
        },
        {
          "caption": "Pub/Sub Pattern",
          "code": "import { helper } from 'xajs/functional'\nconst { PS } = helper\nconst events = new PS()\nevents.on('userUpdate', user => {\nconsole.log('User updated:', user)\n})\nevents.emit('userUpdate', { id: 1, name: 'John' })\n"
        }
      ],
      "see": [
        {
          "url": "https://ajs.dev/docs/functional",
          "text": "Functional Module Documentation"
        }
      ]
    }
  },
  {
    "path": "future/index.js",
    "info": {
      "description": "Experimental Features Module Experimental and cutting-edge features for next-generation JavaScript development.",
      "namespaces": [
        {
          "title": "ExperimentalFeatures",
          "properties": [
            {
              "type": "Object",
              "name": "templates",
              "description": "Template rendering engine with reactive updates"
            },
            {
              "type": "Object",
              "name": "effects",
              "description": "Advanced effect system for side-effect management"
            },
            {
              "type": "Object",
              "name": "reactive",
              "description": "Reactive programming utilities and patterns"
            },
            {
              "type": "Object",
              "name": "async",
              "description": "Next-generation async patterns and control"
            },
            {
              "type": "Object",
              "name": "experimental",
              "description": "Cutting-edge JavaScript features exploration"
            }
          ]
        }
      ],
      "examples": [
        {
          "caption": "",
          "code": "import { trp, ae } from 'xajs/future'\n// Create a template with reactive properties\nconst template = trp`\n<div>\n<h1>${state.title}</h1>\n<p>${state.content}</p>\n</div>\n`\n// Use advanced effects\nae.effect(() => {\n// Side effects automatically tracked and cleaned up\nconst subscription = api.subscribe(data => {\nstate.update(data)\n})\nreturn () => subscription.unsubscribe()\n})\n"
        }
      ],
      "see": []
    }
  },
  {
    "path": "index.js",
    "info": {
      "description": "AJS - A thoughtfully crafted JavaScript utility library A thoughtfully crafted JavaScript utility library that combines classical utilities with modern programming paradigms. It provides a rich set of tools while maintaining a minimal footprint and high flexibility.",
      "namespaces": [
        {
          "title": "CoreUtilities",
          "properties": [
            {
              "type": "Object",
              "name": "classSystem",
              "description": "Powerful class system with inheritance and mixins"
            },
            {
              "type": "Object",
              "name": "decorators",
              "description": "Flexible decorators for enhancing classes and methods"
            },
            {
              "type": "Object",
              "name": "promises",
              "description": "Promise utilities and deferred execution"
            },
            {
              "type": "Object",
              "name": "types",
              "description": "Type checking and object manipulation"
            }
          ]
        },
        {
          "title": "DOMManipulation",
          "properties": [
            {
              "type": "Object",
              "name": "vdom",
              "description": "Lightweight virtual DOM implementation"
            },
            {
              "type": "Object",
              "name": "events",
              "description": "Event handling and delegation"
            },
            {
              "type": "Object",
              "name": "touch",
              "description": "Mobile-optimized touch events"
            },
            {
              "type": "Object",
              "name": "url",
              "description": "URL parsing and manipulation"
            }
          ]
        },
        {
          "title": "FunctionalProgramming",
          "properties": [
            {
              "type": "Object",
              "name": "composition",
              "description": "Function composition and currying"
            },
            {
              "type": "Object",
              "name": "di",
              "description": "Dependency injection system"
            },
            {
              "type": "Object",
              "name": "pubsub",
              "description": "Pub/Sub event system"
            },
            {
              "type": "Object",
              "name": "promiseUtils",
              "description": "Promise-based utilities"
            }
          ]
        },
        {
          "title": "LanguageExtensions",
          "properties": [
            {
              "type": "Object",
              "name": "string",
              "description": "Enhanced string manipulation"
            },
            {
              "type": "Object",
              "name": "array",
              "description": "Advanced array operations"
            },
            {
              "type": "Object",
              "name": "object",
              "description": "Object transformation utilities"
            },
            {
              "type": "Object",
              "name": "typeConversion",
              "description": "Type conversion helpers"
            }
          ]
        }
      ],
      "examples": [
        {
          "caption": "Class System",
          "code": "import { Class } from 'xajs/core';\nconst MyClass = Class({\n$extends: ParentClass,\n$mixins: [SomeMixin],\n$ctor() {\nthis.name = 'example';\n}\n});\n"
        },
        {
          "caption": "DOM Manipulation",
          "code": "import { h } from 'xajs/dom';\nconst vnode = h('div', { className: 'container' }, [\nh('h1', null, 'Hello AJS!'),\nh('button', { onClick: () => alert('Clicked!') }, 'Click Me')\n]);\n"
        },
        {
          "caption": "Functional Programming",
          "code": "import { helper } from 'xajs/functional';\nconst { tryNext } = helper;\nconst result = await tryNext([\nasync () => await primaryAPI(),\nasync () => await fallbackAPI()\n]);\n"
        }
      ],
      "see": []
    }
  },
  {
    "path": "internal/index.js",
    "info": {
      "description": "Internal Utilities Module Core internal utilities and helper functions used across the library.",
      "namespaces": [
        {
          "title": "InternalUtilities",
          "properties": [
            {
              "type": "Object",
              "name": "typeChecking",
              "description": "Type checking and validation utilities"
            },
            {
              "type": "Object",
              "name": "objectUtils",
              "description": "Object property manipulation helpers"
            },
            {
              "type": "Object",
              "name": "helpers",
              "description": "Common internal helper functions"
            },
            {
              "type": "Object",
              "name": "shared",
              "description": "Shared utilities used across other modules"
            }
          ]
        }
      ],
      "examples": [
        {
          "caption": "",
          "code": "import { is, assign } from 'xajs/internal'\n// Type checking\nif (is.string(value)) {\n// Handle string type\n}\n// Safe object assignment\nconst merged = assign({}, source, {\nnewProp: 'value'\n})\n"
        }
      ],
      "see": []
    }
  },
  {
    "path": "lang/index.js",
    "info": {
      "description": "Language Enhancement Module Advanced language utilities for string manipulation and code generation.",
      "namespaces": [
        {
          "title": "LanguageUtilities",
          "properties": [
            {
              "type": "Object",
              "name": "string",
              "description": "String manipulation and transformation"
            },
            {
              "type": "Object",
              "name": "language",
              "description": "Enhanced JavaScript language features"
            },
            {
              "type": "Object",
              "name": "generation",
              "description": "Code generation utilities"
            },
            {
              "type": "Object",
              "name": "dsl",
              "description": "DSL support tools"
            }
          ]
        }
      ],
      "examples": [
        {
          "caption": "",
          "code": "import { MagicString } from 'xajs/lang'\n// Create a magic string for code manipulation\nconst code = new MagicString('function hello() { return \"world\" }')\n// Manipulate the code\ncode\n.update(8, 13, 'greet')\n.append('hello()')\nconsole.log(code.toString())\n// Output: function greet() { return \"world\" }hello()\n"
        }
      ],
      "see": []
    }
  },
  {
    "path": "mobile/index.js",
    "info": {
      "description": "Mobile Development Module Comprehensive utilities for mobile web development and device detection.",
      "namespaces": [
        {
          "title": "MobileUtilities",
          "properties": [
            {
              "type": "Object",
              "name": "userAgent",
              "description": "User agent parsing and detection"
            },
            {
              "type": "Object",
              "name": "events",
              "description": "Mobile-specific event handling"
            },
            {
              "type": "Object",
              "name": "touch",
              "description": "Touch and gesture support"
            },
            {
              "type": "Object",
              "name": "device",
              "description": "Device capability detection"
            },
            {
              "type": "Object",
              "name": "responsive",
              "description": "Responsive design helpers"
            }
          ]
        }
      ],
      "examples": [
        {
          "caption": "",
          "code": "import { ua } from 'xajs/mobile'\n// Detect device and platform\nconst userAgent = ua.parse(navigator.userAgent)\nif (userAgent.isIOS) {\n// iOS specific handling\n} else if (userAgent.isAndroid) {\n// Android specific handling\n}\n"
        }
      ],
      "see": []
    }
  },
  {
    "path": "mobile/ua/index.js",
    "info": {
      "description": "User Agent Parser Module - Comprehensive user agent parsing - Browser and version detection - Operating system identification - Device type recognition - Engine and rendering capabilities detection",
      "namespaces": [],
      "examples": [
        {
          "caption": "",
          "code": "import { UserAgent } from 'xajs/mobile/ua'\nconst ua = new UserAgent(navigator.userAgent)\nconsole.log({\nbrowser: ua.getBrowser(),\nos: ua.getOS(),\ndevice: ua.getDevice(),\nengine: ua.getEngine()\n})\n"
        }
      ],
      "see": []
    }
  },
  {
    "path": "mobile/ua/parsers/index.js",
    "info": {
      "description": "User Agent Parsers Collection - Modular parser architecture - Extensible parsing rules - High accuracy detection - Customizable parsing strategies",
      "namespaces": [],
      "examples": [
        {
          "caption": "",
          "code": "import { BrowserParser, OSParser } from 'xajs/mobile/ua/parsers'\nconst browserInfo = new BrowserParser().parse(userAgent)\nconst osInfo = new OSParser().parse(userAgent)\nconsole.log({\nbrowser: browserInfo.name,\nversion: browserInfo.version,\nos: osInfo.name,\nplatform: osInfo.platform\n})\n"
        }
      ],
      "see": []
    }
  }
]